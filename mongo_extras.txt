# ##### ALL PLAYERS ALL GAMES STATS PER GAME #####
    
# def nba_update_player_game_data(db):
#     try:
#         # Fetch all players from the players collection
#         players = db.players.find()

#         # Iterate over each player
#         for player in players:
#             player_id = player['id']

#             # Fetch game data for the player
#             player_game_data = fetch_player_game_data(player_id)

#             # Convert JSON data to Python dictionary
#             game_data = json.loads(player_game_data)

#             # Check and insert new game data
#             for game in game_data:
#                 game_id = game['Game_ID']

#                 # Check if the game already exists in the player_games collection
#                 if db.playersgamelog.find_one({"player_id": player_id, "Game_ID": game_id}) is None:
#                     # Insert the new game data
#                     db.playersgamelog.insert_one({
#                         "player_id": player_id,
#                         "Game_ID": game_id,
#                         "AST": game.get('AST', 0),
#                         "BLK": game.get('BLK', 0),
#                         "DREB": game.get('DREB', 0),
#                         "FG3A": game.get('FG3A', 0),
#                         "FG3M": game.get('FG3M', 0),
#                         "FG3_PCT": game.get('FG3_PCT', 0),
#                         "FGA": game.get('FGA', 0),
#                         "FGM": game.get('FGM', 0),
#                         "FG_PCT": game.get('FG_PCT', 0),
#                         "FTA": game.get('FTA', 0),
#                         "FTM": game.get('FTM', 0),
#                         "FT_PCT": game.get('FT_PCT', 0),
#                         "GAME_DATE": game.get('GAME_DATE', ''),
#                         "Game_ID": game.get('Game_ID', ''),
#                         "MATCHUP": game.get('MATCHUP', ''),
#                         "MIN": game.get('MIN', ''),
#                         "OREB": game.get('OREB', 0),
#                         "PF": game.get('PF', 0),
#                         "PLUS_MINUS": game.get('PLUS_MINUS', 0),
#                         "PTS": game.get('PTS', 0),
#                         "REB": game.get('REB', 0),
#                         "SEASON_ID": game.get('SEASON_ID', ''),
#                         "STL": game.get('STL', 0),
#                         "TOV": game.get('TOV', 0),
#                         "WL": game.get('WL', ''),
#                         # Add other relevant fields from the game data
#                     })

#         # Return success response
#         response = {'message': 'Players added or updated in the database successfully.'}
#         return json.dumps(response), 200, {'Content-Type': 'application/json'}

#     except Exception as e:
#         return str(e)

# def fetch_player_game_data(player_id):
#     try:
#         # Retrieve player game logs for the entire season
#         gamelog = playergamelog.PlayerGameLog(player_id=player_id, season=SeasonAll.current_season)
#         player_stats = gamelog.get_data_frames()[0]

#         date_format = "%b %d, %Y"

#         # Convert the 'GAME_DATE' column to datetime using the specified format
#         player_stats['GAME_DATE'] = pd.to_datetime(player_stats['GAME_DATE'], format=date_format)

#         # Sort the data by game date in descending order (most recent first)
#         player_stats = player_stats.sort_values(by='GAME_DATE', ascending=False)

#         # Convert the selected data to JSON format
#         json_data = player_stats.to_json(orient='records')

#         return json_data

#     except Exception as e:
#         # Send error response
#         error_message = {'error': str(e)}
#         return json.dumps(error_message), 500, {'Content-Type': 'application/json'} 